#!groovy

/**
* Declarative pipeline script to build crDroid devices in Jenkins
*
* Heavy reliance on: 
* https://github.com/jenkinsci/pipeline-examples/blob/master/pipeline-examples/parallel-from-list/parallelFromList.groovy
* and
* https://github.com/jenkinsci/pipeline-examples/blob/master/pipeline-examples/parallel-multiple-nodes/ParallelMultipleNodes.groovy
*
*/

public class MyNode implements Serializable {
    String name
    String workingDir
}

public class Device implements Serializable {
    String name
    MyNode node
    boolean enabled
    int buildDay
}

/* Nodes to build on */
def myNodes = []
myNodes += new MyNode(name: 'master', workingDir: '/home/vache/android/repos/cr')
myNodes += new MyNode(name: 'home', workingDir: '/home/vache/android/cr')

def devices = []

/* maps for parallel */
def builders = [:]
def stepsForParallel = [:]

/* function to transform a string into a step */
def transformIntoStep(device, myNode) {
    return {
        node(myNode.name) {
            dir(path: myNode.workingDir) {
                sh """#!/bin/bash
. ./build/envsetup.sh
lunch lineage_$device-userdebug"""
            }
        }
    }
}

def GetCurrentDay() {
    date = new Date()
    day = date[Calendar.DAY_OF_MONTH]
    return day
}

def LoadDevices(nodes, devices) {
    URL url = new URL("https://raw.githubusercontent.com/boulzordev/jenkins/master/devices.list");
    InputStream is = url.openStream();
    BufferedReader br = new BufferedReader(new InputStreamReader(is));
    String line = br.readLine();
    while(line != null && !line.isEmpty()) {
        String[] curLineArray = line.split();
        if (curLineArray.length == 4) {
            Integer buildDay = Integer.valueOf(curLineArray[2]);
            String deviceName = curLineArray[0];
            MyNode currentNode = nodes.get(Integer.valueOf(curLineArray[1]));
            Boolean deviceEnabled = Boolean.valueOf(curLineArray[3]);
            devices += new Device(buildDay: buildDay, name: deviceName, node: currentNode, enabled: deviceEnabled)
        }
        line = br.readLine();
    }

    return devices;
}

pipeline {
    agent none

    stages {
        stage('Sync') {
            steps {
                script {
                    for (int i = 0; i < myNodes.size(); i++) {
                        def label = myNodes.get(i)

                        builders[label.name] = {
                            node(label.name) {
                                dir(path: label.name) {
                                    //sh 'repo sync -j48 -cdf --force-sync'
                                    sh 'echo syncing..'
                                }
                            }
                        }
                    }

                    parallel builders
                }
            }
        }
        stage('Load devices') {
            agent any

            steps {
                script {
                    devices = LoadDevices(myNodes, devices);
                    println(devices.size + " devices loaded");
                }
            }
        }
        stage('Build') {
            agent any

            steps {
                script {
                    for (int i = 0; i < devices.size(); i++) {
                        def device = devices.get(i)
                        def stepName = "${device.name}"

                        if (GetCurrentDay() == device.buildDay && device.enabled) {
                            stepsForParallel[stepName] = transformIntoStep(device.name, device.node)
                        }
                    }

                    parallel stepsForParallel
                }
            }
        }
    }
}
