#!groovy

/**
* Declarative pipeline script to build crDroid devices in Jenkins
*
* Heavy reliance on: 
* https://github.com/jenkinsci/pipeline-examples/blob/master/pipeline-examples/parallel-from-list/parallelFromList.groovy
* and
* https://github.com/jenkinsci/pipeline-examples/blob/master/pipeline-examples/parallel-multiple-nodes/ParallelMultipleNodes.groovy
*
*/

public class MyNode implements Serializable {
    String name
    String workingDir
}

public class Device implements Serializable {
    String name
    MyNode node
    boolean enabled
    int buildDay
}

/* Nodes to build on */
def myNodes = []
myNodes += new MyNode(name: 'master', workingDir: '/home/vache/android/repos/cr')
myNodes += new MyNode(name: 'home', workingDir: '/home/vache/android/cr')

def devices = []

/* Devices to build */
devices += new Device(buildDay: 1, name: 'addison', node: myNodes.get(0), enabled: true)
devices += new Device(buildDay: 1, name: 'angler', node: myNodes.get(0), enabled: true)
devices += new Device(buildDay: 1, name: 'athene', node: myNodes.get(0), enabled: true)
devices += new Device(buildDay: 1, name: 'bacon', node: myNodes.get(0), enabled: true)
devices += new Device(buildDay: 1, name: 'bullhead', node: myNodes.get(0), enabled: true)
devices += new Device(buildDay: 1, name: 'cancro', node: myNodes.get(0), enabled: true)
devices += new Device(buildDay: 1, name: 'clark', node: myNodes.get(0), enabled: true)
devices += new Device(buildDay: 1, name: 'crackling', node: myNodes.get(0), enabled: true)
devices += new Device(buildDay: 1, name: 'd800', node: myNodes.get(0), enabled: true)
devices += new Device(buildDay: 1, name: 'd801', node: myNodes.get(0), enabled: true)
devices += new Device(buildDay: 1, name: 'd802', node: myNodes.get(0), enabled: true)

devices += new Device(buildDay: 2, name: 'd803', node: myNodes.get(0), enabled: true)
devices += new Device(buildDay: 2, name: 'd850', node: myNodes.get(0), enabled: true)
devices += new Device(buildDay: 2, name: 'd852', node: myNodes.get(0), enabled: true)
devices += new Device(buildDay: 2, name: 'd852', node: myNodes.get(0), enabled: true)
devices += new Device(buildDay: 2, name: 'd855', node: myNodes.get(0), enabled: true)
devices += new Device(buildDay: 2, name: 'deb', node: myNodes.get(0), enabled: true)
devices += new Device(buildDay: 2, name: 'ether', node: myNodes.get(0), enabled: true)
devices += new Device(buildDay: 2, name: 'f400', node: myNodes.get(0), enabled: true)
devices += new Device(buildDay: 2, name: 'falcon', node: myNodes.get(0), enabled: true)
devices += new Device(buildDay: 2, name: 'ferrari', node: myNodes.get(0), enabled: true)
devices += new Device(buildDay: 2, name: 'find7', node: myNodes.get(0), enabled: true)

devices += new Device(buildDay: 3, name: 'flo', node: myNodes.get(0), enabled: true)
devices += new Device(buildDay: 3, name: 'g3ds', node: myNodes.get(0), enabled: true)
devices += new Device(buildDay: 3, name: 'gemini', node: myNodes.get(0), enabled: true)
devices += new Device(buildDay: 3, name: 'griffin', node: myNodes.get(0), enabled: true)
devices += new Device(buildDay: 3, name: 'h833', node: myNodes.get(0), enabled: true)
devices += new Device(buildDay: 3, name: 'h835', node: myNodes.get(0), enabled: true)
devices += new Device(buildDay: 3, name: 'h830', node: myNodes.get(0), enabled: true)
devices += new Device(buildDay: 3, name: 'h850', node: myNodes.get(0), enabled: true)
devices += new Device(buildDay: 3, name: 'hammerhead', node: myNodes.get(0), enabled: true)
devices += new Device(buildDay: 3, name: 'hammerheadcaf', node: myNodes.get(0), enabled: true)
devices += new Device(buildDay: 3, name: 'herolte', node: myNodes.get(0), enabled: true)

devices += new Device(buildDay: 4, name: 'hero2lte', node: myNodes.get(0), enabled: true)
devices += new Device(buildDay: 4, name: 'himaul', node: myNodes.get(0), enabled: true)
devices += new Device(buildDay: 4, name: 'hockie', node: myNodes.get(0), enabled: true)
devices += new Device(buildDay: 4, name: 'hydrogen', node: myNodes.get(0), enabled: true)
devices += new Device(buildDay: 4, name: 'i9300', node: myNodes.get(0), enabled: true)
devices += new Device(buildDay: 4, name: 'jfltexx', node: myNodes.get(0), enabled: true)
devices += new Device(buildDay: 4, name: 'kipper', node: myNodes.get(0), enabled: true)
devices += new Device(buildDay: 4, name: 'klte', node: myNodes.get(0), enabled: true)
devices += new Device(buildDay: 4, name: 'kltechn', node: myNodes.get(0), enabled: true)
devices += new Device(buildDay: 4, name: 'kltechnduo', node: myNodes.get(0), enabled: true)

devices += new Device(buildDay: 5, name: 'klteduos', node: myNodes.get(0), enabled: true)
devices += new Device(buildDay: 5, name: 'kltedv', node: myNodes.get(0), enabled: true)
devices += new Device(buildDay: 5, name: 'kltekor', node: myNodes.get(0), enabled: true)
devices += new Device(buildDay: 5, name: 'kltespr', node: myNodes.get(0), enabled: true)
devices += new Device(buildDay: 5, name: 'klteusc', node: myNodes.get(0), enabled: true)
devices += new Device(buildDay: 5, name: 'kltevzw', node: myNodes.get(0), enabled: true)
devices += new Device(buildDay: 5, name: 'ks05ltexx', node: myNodes.get(0), enabled: true)
devices += new Device(buildDay: 5, name: 'lettuce', node: myNodes.get(0), enabled: true)
devices += new Device(buildDay: 5, name: 'ls980', node: myNodes.get(0), enabled: true)
devices += new Device(buildDay: 5, name: 'ls990', node: myNodes.get(0), enabled: true)
devices += new Device(buildDay: 5, name: 'm8', node: myNodes.get(0), enabled: true)

devices += new Device(buildDay: 6, name: 'm8d', node: myNodes.get(0), enabled: true)
devices += new Device(buildDay: 6, name: 'mako', node: myNodes.get(0), enabled: true)
devices += new Device(buildDay: 6, name: 'mido', node: myNodes.get(0), enabled: true)
devices += new Device(buildDay: 6, name: 'oneplus3', node: myNodes.get(0), enabled: true)
devices += new Device(buildDay: 6, name: 'onyx', node: myNodes.get(0), enabled: true)
devices += new Device(buildDay: 6, name: 'marlin', node: myNodes.get(0), enabled: true)
devices += new Device(buildDay: 6, name: 'potter', node: myNodes.get(0), enabled: true)
devices += new Device(buildDay: 6, name: 'pme', node: myNodes.get(0), enabled: true)
devices += new Device(buildDay: 6, name: 's2', node: myNodes.get(0), enabled: true)

devices += new Device(buildDay: 7, name: 'sailfish', node: myNodes.get(0), enabled: true)
devices += new Device(buildDay: 7, name: 'shamu', node: myNodes.get(0), enabled: true)
devices += new Device(buildDay: 7, name: 'thea', node: myNodes.get(0), enabled: true)
devices += new Device(buildDay: 7, name: 'titan', node: myNodes.get(0), enabled: true)
devices += new Device(buildDay: 7, name: 'tomato', node: myNodes.get(0), enabled: true)
devices += new Device(buildDay: 7, name: 'v500', node: myNodes.get(0), enabled: true)
devices += new Device(buildDay: 7, name: 'vs980', node: myNodes.get(0), enabled: true)
devices += new Device(buildDay: 7, name: 'vs985', node: myNodes.get(0), enabled: true)


/* maps for parallel */
def builders = [:]
def stepsForParallel = [:]

/* function to transform a string into a step */
def transformIntoStep(device, myNode) {
    return {
        node(myNode.name) {
            dir(path: myNode.workingDir) {
                sh """#!/bin/bash
. ./build/envsetup.sh
lunch lineage_$device-userdebug"""
            }
        }
    }
}

def GetCurrentDay() {
    date = new Date()
    day = date[Calendar.DAY_OF_MONTH]
    return day
}

pipeline {
    agent none

    stages {
        stage('Sync') {
            steps {
                script {
                    for (int i = 0; i < myNodes.size(); i++) {
                        def label = myNodes.get(i)

                        builders[label.name] = {
                            node(label.name) {
                                dir(path: label.name) {
                                    //sh 'repo sync -j48 -cdf --force-sync'
                                    sh 'echo syncing..'
                                }
                            }
                        }
                    }

                    parallel builders
                }
            }
        }
        stage('Build') {
            agent any

            steps {
                script {
                    for (int i = 0; i < devices.size(); i++) {
                        def device = devices.get(i)
                        def stepName = "${device.name}"

                        if (GetCurrentDay() == device.buildDay && device.enabled) {
                            stepsForParallel[stepName] = transformIntoStep(device.name, device.node)
                        }
                    }

                    parallel stepsForParallel
                }
            }
        }
    }
}
