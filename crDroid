#!groovy

/**
* Declarative pipeline script to build crDroid devices in Jenkins
*
* Heavy reliance on: 
* https://github.com/jenkinsci/pipeline-examples/blob/master/pipeline-examples/parallel-from-list/parallelFromList.groovy
* and
* https://github.com/jenkinsci/pipeline-examples/blob/master/pipeline-examples/parallel-multiple-nodes/ParallelMultipleNodes.groovy
*
*/

/* Nodes to build on */
def labels = ['master']

/* Devices to build */
def devices = ['addison', 'angler', 'athene', 'bacon', 'bullhead', 'cancro', 'clark', 'crackling', 'd800', 'd801', 'd802', 'd803', 'd850', 'd851', 'd852', 'd855', 'deb', 'ether', 'f400', 'falcon', ferrari', 'find7', 'flo', 'g3ds', 'gemini', 'griffin', 'h811', 'h815', 'h830', 'h850', 'hammerhead', 'hammerheadcaf', 'herolte, 'hero2lte', 'himaul', 'hockie', 'hydrogen', 'i9300', 'jfltexx', 'kipper', 'klte', 'kltechn', 'kltechnduo', 'klteduos', 'kltedv', 'kltekor', 'kltespr', 'klteusc', 'kltevzw', 'ks01ltexx', 'lettuce', 'ls980', 'ls990', 'm8', 'm8d', 'mako', 'mido', 'oneplus3', 'onyx', 'marlin', 'potter', 'pme', 's2', 'sailfish', 'shamu', 'thea', 'titan', 'tomato', 'v500', 'vs980', 'vs985']

/* maps for parallel */
def builders = [:]
def stepsForParallel = [:]

/* function to transform a string into a step */
def transformIntoStep(device) {
    return {
        node {
            dir(path: '/home/vache/android/repos/cr') {
                sh """#!/bin/bash
. ./build/envsetup.sh
lunch lineage_$device-userdebug"""
            }
        }
    }
}

pipeline {
    agent none

    stages {
        stage('Sync') {
            steps {
                script {
                    for (x in labels) {
                        def label = x

                        builders[label] = {
                            node(label) {
                                dir(path: '/home/vache/android/repos/cr') {
                                    //sh 'repo sync -j48 -cdf --force-sync'
                                    sh 'echo syncing..'
                                }
                            }
                        }
                    }

                    parallel builders
                }
            }
        }
        stage('Build') {
            agent any

            steps {
                script {
                    for (int i = 0; i < devices.size(); i++) {
                        def device = devices.get(i)
                        def stepName = "${device}"

                        stepsForParallel[stepName] = transformIntoStep(device)
                    }

                    parallel stepsForParallel
                }
            }
        }
    }
}
